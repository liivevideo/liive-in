// Generated by CoffeeScript 1.10.0
(function() {
  var Handshake, RTCChannel, Room;

  RTCChannel = require('../lib/RTCChannel');

  Handshake = require('../lib/Handshake');

  Room = (function() {
    var channel, didConnect, didExchange, didLeave, exchangeCandidate, exchangeDescription, handshake;

    handshake = null;

    channel = null;

    function Room(configuration, _observers) {
      channel = new RTCChannel(configuration, _observers, {
        exchangeDescription: exchangeDescription,
        exchangeCandidate: exchangeCandidate
      });
      handshake = new Handshake(configuration, {
        didConnect: didConnect,
        didExchange: didExchange,
        didLeave: didLeave
      });
      return;
    }

    Room.prototype.join = function(roomId, callback) {
      handshake.join(roomId, function(error, ids) {
        var i, id, len;
        for (i = 0, len = ids.length; i < len; i++) {
          id = ids[i];
          channel.createListener(id, true);
        }
        if (callback != null) {
          return callback(null, ids);
        }
      });
    };

    Room.prototype.leave = function(roomId, callback) {
      handshake.leave(roomId, callback);
    };

    Room.prototype.say = function(text) {
      channel.send(text);
    };

    exchangeDescription = function(id, description) {
      if (id !== null) {
        handshake.description(id, description);
      }
    };

    exchangeCandidate = function(id, candidate) {
      if (id !== null) {
        handshake.candidate(id, candidate);
      }
    };

    didConnect = function() {
      channel.getMedia({
        "audio": true,
        "video": true
      }, function(stream) {});
    };

    didExchange = function(data) {
      channel.exchange(data);
    };

    didLeave = function(id) {
      channel.deleteListener(id, function(error, id) {});
    };

    return Room;

  })();

  module.exports = Room;

}).call(this);

//# sourceMappingURL=Room.js.map
