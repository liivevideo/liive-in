// Generated by CoffeeScript 1.10.0
(function() {
  var RTCChannel;

  RTCChannel = (function() {
    var RTCIceCandidate, RTCPeerConnection, RTCSessionDescription, _createListener, configuration, createOffer, createTextChannel, getUserMedia, localStream, observers, pcPeers, reactions;

    pcPeers = {};

    localStream = null;

    getUserMedia = null;

    configuration = null;

    observers = null;

    reactions = null;

    RTCPeerConnection = null;

    RTCSessionDescription = null;

    RTCIceCandidate = null;

    function RTCChannel(_configuration, _observers, _reactions) {
      configuration = _configuration;
      RTCPeerConnection = _configuration.RTCPeerConnection;
      RTCSessionDescription = _configuration.RTCSessionDescription;
      RTCIceCandidate = _configuration.RTCIceCandidate;
      getUserMedia = configuration.getUserMedia;
      observers = _observers;
      reactions = _reactions;
    }

    RTCChannel.prototype.getMedia = function(types, callback) {
      getUserMedia(types, function(stream) {
        localStream = stream;
        observers.foundLocalVideoChannel(localStream);
        callback(stream);
      }, function(error) {
        return console.log(error);
      });
    };

    createTextChannel = function(pc, socketId) {
      var dataChannel;
      if ((pc.textDataChannel != null)) {
        return;
      }
      dataChannel = pc.createDataChannel("text");
      pc.textDataChannel = observers.addedTextChannel(socketId, dataChannel);
    };

    RTCChannel.prototype.createListener = function(socketId, isOffer) {
      return _createListener(socketId, isOffer);
    };

    createOffer = function(pc, socketId) {
      return pc.createOffer(function(desc) {
        return pc.setLocalDescription(desc, function() {
          return reactions.exchangeDescription(socketId, pc.localDescription);
        }, function(error) {
          return console.log("ERROR::onnegotiationneeded: set local description error:" + error);
        });
      }, function(error) {
        return console.log("ERROR::onnegotiationneeded: Create Offer error:" + error);
      });
    };

    _createListener = function(socketId, isOffer) {
      var pc;
      pc = new RTCPeerConnection(configuration);
      pcPeers[socketId] = pc;
      pc.onicecandidate = function(event) {
        if ((event != null) && (event.candidate != null)) {
          return reactions.exchangeCandidate(socketId, event.candidate);
        }
      };
      pc.onnegotiationneeded = function() {
        if (isOffer) {
          return createOffer(pc, socketId);
        }
      };
      pc.oniceconnectionstatechange = function(event) {
        if (event.target.iceConnectionState === 'connected') {
          return createTextChannel(pc, socketId);
        }
      };
      pc.onsignalingstatechange = function(event) {};
      pc.onaddstream = function(event) {
        return observers.addedVideoChannel(socketId, event.stream);
      };
      pc.addStream(localStream);
      return pc;
    };

    RTCChannel.prototype.deleteListener = function(socketId, callback) {
      var pc;
      pc = pcPeers[socketId];
      if (pc) {
        pc.close();
        delete pcPeers[socketId];
      }
      observers.removedVideoChannel(socketId);
      callback(null, socketId);
    };

    RTCChannel.prototype.send = function(text) {
      var key, pc;
      for (key in pcPeers) {
        pc = pcPeers[key];
        pc.textDataChannel.send(text);
      }
    };

    RTCChannel.prototype.exchange = function(data) {
      var fromId, pc2;
      fromId = data.from;
      if ((pcPeers[fromId] != null)) {
        pc2 = pcPeers[fromId];
      } else {
        pc2 = _createListener(fromId, false);
      }
      if (data.sdp) {
        pc2.setRemoteDescription(new RTCSessionDescription(data.sdp), function() {
          if (pc2.remoteDescription.type === "offer") {
            pc2.createAnswer(function(desc) {
              return pc2.setLocalDescription(desc, function() {
                return reactions.exchangeDescription(fromId, pc2.localDescription);
              }, function(error) {
                console.log("RTCChannel:: ERROR in set local descriptoin:" + error, null);
              });
            }, function(error) {
              console.log("RTCChannel:: ERROR in create answer:" + error, null);
            });
          }
        }, function(error) {
          console.log("RTCChannel:: ERROR in set remote description: " + error, null);
        });
      } else {
        pc2.addIceCandidate(new RTCIceCandidate(data.candidate));
      }
    };

    return RTCChannel;

  })();

  module.exports = RTCChannel;

}).call(this);

//# sourceMappingURL=RTCChannel.js.map
